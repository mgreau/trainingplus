package com.trainingplus.server.model;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.fail;

import java.util.Date;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.google.appengine.api.datastore.EntityNotFoundException;
import com.google.appengine.tools.development.testing.LocalDatastoreServiceTestConfig;
import com.google.appengine.tools.development.testing.LocalServiceTestHelper;
import com.googlecode.objectify.Key;
import com.trainingplus.server.dao.IClubDAO;
import com.trainingplus.server.dao.TplusDAOFactory;
import com.trainingplus.server.dao.TplusDAOFactory.ISeasonDAO;

public class ClubTest {

	private final LocalServiceTestHelper helper = new LocalServiceTestHelper(
			new LocalDatastoreServiceTestConfig());

	@Before
	public void setUp() {
		helper.setUp();
	}

	@After
	public void tearDown() {
		helper.tearDown();
	}

	@Test
	public void CRUDClub() {
		IClubDAO clubDAO = TplusDAOFactory.getClubDAO();

		// Simple create
		Club barca = new Club("Barcelone");
		clubDAO.put(barca);
		assert barca.id != null; // id was autogenerated

		// Get it back
		Club fetched1 = null;
		try {
			fetched1 = clubDAO.get(new Key<Club>(Club.class, barca.id));
		} catch (EntityNotFoundException e1) {
			fail("entity barça not found");
		}
		Club fetched2 = null;
		try {
			fetched2 = clubDAO.get(barca.id);
		} catch (EntityNotFoundException e1) {
			fail("entity barça not found");
		} // equivalent, more
		assertEquals("Objects seem to not be equals", fetched1, fetched2);

		// Change some data and write it
		barca.setName("psg");
		clubDAO.put(barca);
		try {
			assertNotSame("Name must be different", "Barcelone", clubDAO.get(barca.id).getName());
		} catch (EntityNotFoundException e) {
			fail("entity barça not found");
		}
		
		
		Club real = new Club("Real");
		clubDAO.put(real);
		assertFalse("Objects must be different.", barca.equals(real));

		// Delete it
		clubDAO.delete(barca);
		clubDAO.delete(real);
	}
	

	@Test
	public void ClubWithSeason() {
		IClubDAO clubDAO = TplusDAOFactory.getClubDAO();
		ISeasonDAO seasonDAO = TplusDAOFactory.getSeasonDAO();

		// Simple create
		Club barca = new Club("Barcelone");
		barca.setColor("blue");
		clubDAO.put(barca);
		
		Season s1112 = new Season(new Date(), new Date());
		seasonDAO.put(s1112);
		
		try {
			clubDAO.subscribeClubToASeason(barca, s1112);
		} catch (Exception e) {
			e.printStackTrace();
			fail("Club already subscribe");
			
		}
		try {
			clubDAO.subscribeClubToASeason(barca, s1112);
		} catch (Exception e) {
			assertFalse("Club already subscribe",false);
		}
		
	
	}

}
